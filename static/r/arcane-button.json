{
	"$schema": "https://next.shadcn-svelte.com/schema/registry-item.json",
	"name": "arcane-button",
	"title": "Arcane Button",
	"type": "registry:block",
	"description": "The Button Component for the Arcane Project",
	"dependencies": [
		"@lucide/svelte"
	],
	"registryDependencies": [
		"button"
	],
	"files": [
		{
			"content": "<script lang=\"ts\">\n  import {\n    Button,\n    type Props as ButtonProps,\n  } from \"$lib/components/ui/button/index.js\";\n  import {\n    Play,\n    StopCircle,\n    RotateCcw,\n    Download,\n    Trash2,\n    Loader2,\n    RefreshCcwDot,\n    ScanSearch,\n    FileText,\n    EditIcon as Edit,\n    Check,\n    X,\n    Save,\n    PlusCircle,\n    type Icon as IconType,\n  } from \"@lucide/svelte\";\n\n  type Action =\n    | \"start\"\n    | \"deploy\"\n    | \"stop\"\n    | \"restart\"\n    | \"remove\"\n    | \"pull\"\n    | \"redeploy\"\n    | \"inspect\"\n    | \"logs\"\n    | \"edit\"\n    | \"confirm\"\n    | \"cancel\"\n    | \"save\"\n    | \"create\";\n\n  interface Props {\n    /** The type of action this button represents. Determines icon, default label, and variant. */\n    action: Action;\n    /** Function to call when the button is clicked. */\n    onClick?: (event: MouseEvent) => void;\n    /** If true, shows a loading spinner and disables the button. */\n    loading?: boolean;\n    /** If true, disables the button. */\n    disabled?: boolean;\n    /** Custom label for the button. Overrides the default label for the action. */\n    label?: string;\n    /** Custom loading label for the button. Overrides the default loading label for the action. */\n    loadingLabel?: string;\n    /** If true (default), shows the label text. If false, button will be icon-only. */\n    showLabel?: boolean;\n    /** Additional CSS classes to apply to the button. */\n    class?: string;\n    /** Button size. If 'icon', showLabel is effectively false for rendering purposes. */\n    size?: ButtonProps[\"size\"];\n    /** Alias for label to maintain compatibility */\n    customLabel?: string;\n  }\n\n  let {\n    action,\n    onClick,\n    loading = false,\n    disabled = false,\n    label: propLabel = undefined,\n    customLabel = undefined, // Alternate name for label\n    loadingLabel: customLoadingLabel = undefined,\n    showLabel = true,\n    class: extraClass = \"\",\n    size: customSize = \"default\",\n  }: Props = $props();\n\n  // Use customLabel as fallback for compatibility\n  const label = propLabel ?? customLabel;\n\n  type ActionConfig = {\n    defaultLabel: string;\n    IconComponent: typeof IconType;\n    variant: ButtonProps[\"variant\"];\n    loadingLabel?: string;\n    customClass?: string;\n  };\n\n  const actionConfigs: Record<Action, ActionConfig> = {\n    start: {\n      defaultLabel: \"Start\",\n      IconComponent: Play,\n      variant: \"default\",\n      loadingLabel: \"Starting...\",\n      customClass: \"arcane-button-start\",\n    },\n    deploy: {\n      defaultLabel: \"Deploy\",\n      IconComponent: Play,\n      variant: \"default\",\n      loadingLabel: \"Deploying...\",\n      customClass: \"arcane-button-deploy\",\n    },\n    stop: {\n      defaultLabel: \"Stop\",\n      IconComponent: StopCircle,\n      variant: \"destructive\",\n      loadingLabel: \"Stopping...\",\n      customClass: \"arcane-button-stop\",\n    },\n    restart: {\n      defaultLabel: \"Restart\",\n      IconComponent: RotateCcw,\n      variant: \"secondary\",\n      loadingLabel: \"Restarting...\",\n      customClass: \"arcane-button-restart\",\n    },\n    remove: {\n      defaultLabel: \"Remove\",\n      IconComponent: Trash2,\n      variant: \"destructive\",\n      loadingLabel: \"Removing...\",\n      customClass: \"arcane-button-remove\",\n    },\n    pull: {\n      defaultLabel: \"Pull\",\n      IconComponent: Download,\n      variant: \"secondary\",\n      loadingLabel: \"Pulling...\",\n      customClass: \"arcane-button-pull\",\n    },\n    redeploy: {\n      defaultLabel: \"Redeploy\",\n      IconComponent: RefreshCcwDot,\n      variant: \"secondary\",\n      loadingLabel: \"Redeploying...\",\n      customClass: \"arcane-button-redeploy\",\n    },\n    inspect: {\n      defaultLabel: \"Inspect\",\n      IconComponent: ScanSearch,\n      variant: \"outline\",\n      loadingLabel: \"Inspecting...\",\n      customClass: \"arcane-button-inspect\",\n    },\n    logs: {\n      defaultLabel: \"Logs\",\n      IconComponent: FileText,\n      variant: \"ghost\",\n      loadingLabel: \"Fetching...\",\n      customClass: \"arcane-button-logs\",\n    },\n    edit: {\n      defaultLabel: \"Edit\",\n      IconComponent: Edit,\n      variant: \"secondary\",\n      loadingLabel: \"Saving...\",\n      customClass: \"arcane-button-edit\",\n    },\n    confirm: {\n      defaultLabel: \"Confirm\",\n      IconComponent: Check,\n      variant: \"default\",\n      loadingLabel: \"Confirming...\",\n      customClass: \"arcane-button-confirm\",\n    },\n    cancel: {\n      defaultLabel: \"Cancel\",\n      IconComponent: X,\n      variant: \"ghost\",\n      loadingLabel: \"Cancelling...\",\n      customClass: \"arcane-button-cancel\",\n    },\n    save: {\n      defaultLabel: \"Save\",\n      IconComponent: Save,\n      variant: \"default\",\n      loadingLabel: \"Saving...\",\n      customClass: \"arcane-button-save\",\n    },\n    create: {\n      defaultLabel: \"Create\",\n      IconComponent: PlusCircle,\n      variant: \"default\",\n      loadingLabel: \"Creating...\",\n      customClass: \"arcane-button-create\",\n    },\n  };\n\n  let config = $derived(actionConfigs[action]);\n  let displayLabel = $derived(label ?? config.defaultLabel);\n  // Use custom loading label if provided, otherwise use the config's default loading label\n  let displayLoadingLabel = $derived(\n    customLoadingLabel ?? config.loadingLabel ?? \"Processing...\"\n  );\n\n  // Determine if the button should render as an icon-only button\n  let isIconOnlyButton = $derived(customSize === \"icon\" || !showLabel);\n\n  // Icon margin class - apply only if label is shown and it's not explicitly an icon-sized button\n  let iconMarginClass = $derived(!isIconOnlyButton ? \"mr-2\" : \"\");\n</script>\n\n<Button\n  variant={config.variant}\n  size={customSize}\n  class={`${extraClass} ${config.customClass || \"\"}`}\n  disabled={disabled || loading}\n  onclick={onClick}\n  aria-label={isIconOnlyButton ? displayLabel : undefined}\n>\n  {#if loading}\n    <Loader2 class=\"animate-spin {iconMarginClass} size-4\" />\n    {#if !isIconOnlyButton}\n      {displayLoadingLabel}\n    {/if}\n  {:else}\n    <config.IconComponent class=\"{iconMarginClass} size-4\" />\n    {#if !isIconOnlyButton}\n      {displayLabel}\n    {/if}\n  {/if}\n</Button>\n",
			"type": "registry:component",
			"target": "arcane-button.svelte"
		}
	]
}